TranslationUnitDecl 0x1a9aee8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1a9b780 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1a9b480 '__int128'
|-TypedefDecl 0x1a9b7f0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1a9b4a0 'unsigned __int128'
|-TypedefDecl 0x1a9baf8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x1a9b8d0 'struct __NSConstantString_tag'
|   `-Record 0x1a9b848 '__NSConstantString_tag'
|-TypedefDecl 0x1a9bb90 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1a9bb50 'char *'
|   `-BuiltinType 0x1a9af80 'char'
|-TypedefDecl 0x1a9be88 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x1a9be30 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x1a9bc70 'struct __va_list_tag'
|     `-Record 0x1a9bbe8 '__va_list_tag'
`-FunctionDecl 0x1afad40 <./rev/source_code.c:1:1, line:15:1> line:1:5 test 'int (int *, int *, int)'
  |-ParmVarDecl 0x1afab00 <col:10, col:16> col:14 used a 'int *':'int *'
  |-ParmVarDecl 0x1afab90 <col:19, col:25> col:23 used b 'int *':'int *'
  |-ParmVarDecl 0x1afac10 <col:28, col:32> col:32 used c 'int'
  `-CompoundStmt 0x1afb3e0 <line:2:1, line:15:1>
    |-DeclStmt 0x1afaef8 <line:3:5, col:18>
    | `-VarDecl 0x1afae58 <col:5, col:15> col:11 used d 'float' cinit
    |   `-ImplicitCastExpr 0x1afaee0 <col:15> 'float' <FloatingCast>
    |     `-FloatingLiteral 0x1afaec0 <col:15> 'double' 2.300000e+00
    |-DeclStmt 0x1afafb0 <line:4:5, col:14>
    | `-VarDecl 0x1afaf28 <col:5, col:13> col:9 used e 'int' cinit
    |   `-IntegerLiteral 0x1afaf90 <col:13> 'int' 2
    |-IfStmt 0x1afb370 <line:5:5, line:13:5> has_else
    | |-BinaryOperator 0x1afb020 <line:5:8, col:12> 'int' '>'
    | | |-ImplicitCastExpr 0x1afb008 <col:8> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x1afafc8 <col:8> 'int' lvalue ParmVar 0x1afac10 'c' 'int'
    | | `-IntegerLiteral 0x1afafe8 <col:12> 'int' 10
    | |-CompoundStmt 0x1afb168 <line:6:5, line:8:5>
    | | `-BinaryOperator 0x1afb148 <line:7:9, col:21> 'int' '='
    | |   |-DeclRefExpr 0x1afb040 <col:9> 'int' lvalue Var 0x1afaf28 'e' 'int'
    | |   `-BinaryOperator 0x1afb128 <col:14, col:21> 'int' '+'
    | |     |-ImplicitCastExpr 0x1afb0f8 <col:14> 'int' <LValueToRValue>
    | |     | `-DeclRefExpr 0x1afb060 <col:14> 'int' lvalue ParmVar 0x1afac10 'c' 'int'
    | |     `-ImplicitCastExpr 0x1afb110 <col:18, col:21> 'int' <LValueToRValue>
    | |       `-ArraySubscriptExpr 0x1afb0d8 <col:18, col:21> 'int' lvalue
    | |         |-ImplicitCastExpr 0x1afb0c0 <col:18> 'int *':'int *' <LValueToRValue>
    | |         | `-DeclRefExpr 0x1afb080 <col:18> 'int *':'int *' lvalue ParmVar 0x1afab90 'b' 'int *':'int *'
    | |         `-IntegerLiteral 0x1afb0a0 <col:20> 'int' 0
    | `-CompoundStmt 0x1afb350 <line:10:5, line:13:5>
    |   |-BinaryOperator 0x1afb1f0 <line:11:9, col:14> 'int' '='
    |   | |-DeclRefExpr 0x1afb180 <col:9> 'int' lvalue Var 0x1afaf28 'e' 'int'
    |   | `-UnaryOperator 0x1afb1d8 <col:13, col:14> 'int' prefix '-'
    |   |   `-ImplicitCastExpr 0x1afb1c0 <col:14> 'int' <LValueToRValue>
    |   |     `-DeclRefExpr 0x1afb1a0 <col:14> 'int' lvalue Var 0x1afaf28 'e' 'int'
    |   `-BinaryOperator 0x1afb330 <line:12:9, col:20> 'float' '='
    |     |-DeclRefExpr 0x1afb210 <col:9> 'float' lvalue Var 0x1afae58 'd' 'float'
    |     `-ImplicitCastExpr 0x1afb318 <col:13, col:20> 'float' <IntegralToFloating>
    |       `-BinaryOperator 0x1afb2f8 <col:13, col:20> 'int' '+'
    |         |-ImplicitCastExpr 0x1afb2c8 <col:13> 'int' <LValueToRValue>
    |         | `-DeclRefExpr 0x1afb230 <col:13> 'int' lvalue Var 0x1afaf28 'e' 'int'
    |         `-ImplicitCastExpr 0x1afb2e0 <col:17, col:20> 'int' <LValueToRValue>
    |           `-ArraySubscriptExpr 0x1afb2a8 <col:17, col:20> 'int' lvalue
    |             |-ImplicitCastExpr 0x1afb290 <col:17> 'int *':'int *' <LValueToRValue>
    |             | `-DeclRefExpr 0x1afb250 <col:17> 'int *':'int *' lvalue ParmVar 0x1afab00 'a' 'int *':'int *'
    |             `-IntegerLiteral 0x1afb270 <col:19> 'int' 1
    `-ReturnStmt 0x1afb3d0 <line:14:5, col:12>
      `-ImplicitCastExpr 0x1afb3b8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x1afb398 <col:12> 'int' lvalue Var 0x1afaf28 'e' 'int'
